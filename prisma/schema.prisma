// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "cargo prisma"

  output = "../src/prisma.rs"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EventType {
  Activity
  Food
  Workshop
  checkIn
}

model Event {
  id               String    @id @default(uuid())
  name             String
  type             EventType
  description      String
  location         Location  @relation(fields: [locationId], references: [id])
  locationId       String
  icon             String?
  startTime        DateTime
  endTime          DateTime
  wsPresenterNames String?
  wsRelevantSkills String?
  wsSkillLevel     String?
  wsUrls           String?
  hackathon        Hackathon @relation(fields: [hackathonId], references: [id])
  hackathonId      String
  scan             Scan[]
}

model ExtraCreditAssignment {
  user    User             @relation(fields: [userId], references: [id])
  userId  String
  class   ExtraCreditClass @relation(fields: [classId], references: [id])
  classId String

  @@unique([userId, classId])
}

model ExtraCreditClass {
  id                    String                  @id @default(uuid())
  name                  String
  hackathon             Hackathon               @relation(fields: [hackathonId], references: [id])
  hackathonId           String
  ExtraCreditAssignment ExtraCreditAssignment[]
}

model Hackathon {
  id               String             @id @default(uuid())
  name             String
  startTime        DateTime
  endTime          DateTime
  active           Boolean
  Event            Event[]
  ExtraCreditClass ExtraCreditClass[]
  Project          Project[]
  Registration     Registration[]
  Sponsor          Sponsor[]
}

model Location {
  id    String  @id @default(uuid())
  name  String
  Event Event[]
}

enum Role {
  NONE
  VOLUNTEER
  TEAM
  EXEC
  TECH
  FINANCE
}

model Organizer {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  email     String  @unique
  privilege Role
  gcpId     String  @unique
  Scan      Scan[]
  Score     Score[]
}

model Project {
  id           String         @id @default(uuid())
  name         String
  hackathon    Hackathon      @relation(fields: [hackathonId], references: [id])
  hackathonId  String
  Score        Score[]
  Registration Registration[]
}

model Registration {
  id                         String    @id @default(uuid())
  user                       User      @relation(fields: [userId], references: [id])
  userId                     String
  travelReimbursement        Boolean
  driving                    Boolean
  firstHackathon             Boolean
  academicYear               String
  educationalInstitutionType String
  codingExperience           String?
  shirtSize                  String
  dietaryRestrictions        String?
  allergies                  String?
  eighteenBeforeEvent        Boolean
  mlhCoc                     Boolean
  mlhDcp                     Boolean
  reference                  String?
  resume                     String?
  university                 String
  major                      String
  projectId                  String?
  project                    Project?  @relation(fields: [projectId], references: [id])
  expectations               String?
  shareAddressMlh            Boolean?
  shareAddressSponsors       Boolean?
  shareEmailMlh              Boolean?
  veteran                    Boolean
  hackathon                  Hackathon @relation(fields: [hackathonId], references: [id])
  hackathonId                String
  time                       DateTime
}

model Scan {
  eventId     String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  organizer   Organizer @relation(fields: [organizerId], references: [id])
  organizerId String
  hackathonId String
  Event       Event     @relation(fields: [eventId], references: [id])

  @@unique([eventId, userId])
}

model Sponsor {
  id          String    @id @default(uuid())
  name        String
  level       String
  link        String?
  darkLogo    String
  lightLogo   String
  order       Int
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
  hackathonId String
}

model User {
  id                    String                  @id @default(uuid())
  firstName             String
  lastName              String
  gender                String
  email                 String                  @unique
  phone                 String
  country               String
  race                  String?
  ExtraCreditAssignment ExtraCreditAssignment[]
  Registration          Registration[]
  Scan                  Scan[]
  gcpId                 String                  @unique
  role                       Role     @default(NONE)
}

model Score {
  hackathonId    String
  projectID      String
  project        Project   @relation(fields: [projectID], references: [id])
  judgeID        String
  judge          Organizer @relation(fields: [judgeID], references: [id])
  submitted      Boolean
  creativity     Int
  technicality   Int
  implementation Int
  clarity        Int
  growth         Int
  challenge1     Int
  challenge2     Int
  challenge3     Int

  @@unique([projectID, judgeID])
}
